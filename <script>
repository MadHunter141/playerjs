<script>
    document.addEventListener('DOMContentLoaded', function() {
        const player = videojs('my-video');

        const kinopoiskId = '[xfvalue_kinopoisk_id]';
        const lastSeason = '[xfvalue_last_season]';
        const lastEpisode = '[xfvalue_last_episode]';
        const secretToken = 'b030233327cce4aa51a8cac910ecd4069400afd41b31f83c0d';
        const translationsFile = 'https://hd.spintv.ru/translations.json'; // Путь к файлу с переводами (измените, если нужно)
        const seasonSelect = document.getElementById('season-select');
        const episodeSelect = document.getElementById('episode-select');
        const translationSelect = document.getElementById('translation-select');

        let translations = {}; // Переменная для хранения озвучек

        // Функция для загрузки JSON
        async function loadJSON(url) {
            const response = await fetch(url);
            return response.json();
        }

        // Функция для заполнения select option
        function populateSelect(selectElement, start, end) {
            if (selectElement) {
                for (let i = start; i <= end; i++) {
                    const option = document.createElement('option');
                    option.value = i;
                    option.textContent = i;
                    selectElement.appendChild(option);
                }
            } else {
                console.warn('selectElement is null in populateSelect function.');
            }
        }
        // Заполняем сезоны
        if (lastSeason > 0) {
            populateSelect(seasonSelect, 1, lastSeason);
        } else {
            seasonSelect.style.display = 'none';
            document.querySelector('label[for="season-select"]').style.display = 'none';
        }
        // Заполняем эпизоды
        if (lastEpisode > 0) {
            populateSelect(episodeSelect, 1, lastEpisode);
        } else {
            episodeSelect.style.display = 'none';
            document.querySelector('label[for="episode-select"]').style.display = 'none';
        }
        async function initializePlayer() {
            try {
                const translationsResponse = await fetch(translationsFile);
                translations = await translationsResponse.json();

                translationSelect.innerHTML = '<option value="">Выбрать озвучку</option>';

                // Получаем список озвучек из [xfvalue_translator]
                const translatorString = '[xfvalue_translator]';
                const translatorsArray = translatorString.split(',').map(item => item.trim());

                // Заполняем селектор озвучек только теми, что есть в [xfvalue_translator] и translations.json
                translatorsArray.forEach(translator => {
                    if (translations.hasOwnProperty(translator)) {
                        const option = document.createElement('option');
                        option.value = translator;
                        option.textContent = translator;
                        translationSelect.appendChild(option);
                    }
                });
                seasonSelect.addEventListener('change', () => {
                    loadVideo(seasonSelect.value, episodeSelect.value, translations[translationSelect.value]);
                });

                episodeSelect.addEventListener('change', () => {
                    loadVideo(seasonSelect.value, episodeSelect.value, translations[translationSelect.value]);
                });

                translationSelect.addEventListener('change', () => {
                    const selectedTranslationName = translationSelect.value;
                    const translationId = translations[selectedTranslationName];
                    loadVideo(seasonSelect.value, episodeSelect.value, translationId);
                });
            } catch (e) {
                console.error(e);
                alert("Возникла ошибка при загрузке. Обратитесь к администратору.");
            }
        }
        // Изменена функция loadVideo
        async function loadVideo(selectedSeason, selectedEpisode, translationId) {
            console.log("loadVideo function called", selectedSeason, selectedEpisode, translationId);
            if (!translationId) {
                console.log("Озвучка не выбрана или ID не найден.");
                player.src(''); // Очищаем источник видео
                return;
            }
            const apiUrl = `/proxy.php?kp=${kinopoiskId}&season=${selectedSeason}&episode=${selectedEpisode}&translation=${translationId}`;
            console.log("API URL:", apiUrl);
            try {
                const response = await fetch(apiUrl);
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                const data = await response.json();
                console.log("API Response:", data);
                        console.log("hlsSources:", data.data.file.hlsSource);
        console.log("data:", data);
                if (data && data.status === 'success') {
                    const hlsSources = data.data.file.hlsSource;
                    if (hlsSources && hlsSources.length > 0) {
                        const defaultHlsSource = hlsSources.find(source => source.default) || hlsSources[0];
                        const qualityOptions = defaultHlsSource.quality;
                        // Получаем список качеств
                        const availableQualities = Object.keys(qualityOptions).map(quality => {
                            return {
                                label: quality,
                                url: qualityOptions[quality]
                            };
                        });
                        // Создаем выпадающий список, если больше 1 качества
                        if (availableQualities.length > 1) {
                            createQualitySelector(availableQualities);
                            player.src({
                                src: qualityOptions[availableQualities[0].label],
                                type: 'application/x-mpegURL'
                            });
                            player.play();
                        } else {
                            // Если качество только одно
                            player.src({
                                src: qualityOptions[availableQualities[0].label],
                                type: 'application/x-mpegURL'
                            });
                            player.play();
                        }
                    } else {
                        alert('No HLS sources available.');
                    }
                } else {
                    alert(`Ошибка: ${data ? data.message : 'Не удалось получить данные'}`);
                }
            } catch (error) {
                console.error('Ошибка при загрузке видео:', error);
                alert('Произошла ошибка при загрузке видео. Попробуйте позже.');
            }
        }

        function createQualitySelector(qualities) {
            // Создаем элемент select
            const qualitySelector = document.createElement('select');
            qualitySelector.className = 'vjs-quality-selector';
            // Добавляем опции
            qualities.forEach(quality => {
                const option = document.createElement('option');
                option.value = quality.url;
                option.text = formatQualityLabel(quality.label); // Форматируем label
                qualitySelector.appendChild(option);
            });
            // Обработчик изменения качества
            qualitySelector.addEventListener('change', function() {
                const selectedQuality = this.value;
                console.log("selectedQuality:", selectedQuality)
                // Меняем источник
                player.src({
                    src: selectedQuality,
                    type: 'application/x-mpegURL'
                });
                // Запускаем воспроизведение
                player.play();
            });
            // Добавляем выпадающий список в панель управления плеера
            const controlBar = player.controlBar;
            controlBar.el().appendChild(qualitySelector);
        }
        // Функция для форматирования названия качества
        function formatQualityLabel(label) {
            if (label.toLowerCase() === '2160p' || label.toLowerCase() === '4k') {
                return '4K';
            } else if (label.toLowerCase() === '1080p') {
                return '1080p';
            } else if (label.toLowerCase() === '720p') {
                return '720p';
            } else {
                return label; // Оставляем как есть
            }
        }
        initializePlayer();
    });
</script>
